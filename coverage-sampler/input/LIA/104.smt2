(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.
|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V3 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(assert
 (let
 (($x62430
   (forall
    ((V1_0 Int) (V3_0 Int) 
     (V2_0 Int) (V4_0 Int) 
     (MW_S1_V1 Bool) (MW_S1_V3 Bool) 
     (MW_S1_V2 Bool) (MW_S1_V4 Bool) 
     (MW_S1_V6 Bool) (E1_!4904 Int) 
     (E1_!4907 Int) (E1_!4909 Int) 
     (E2_!4905 Int) (E2_!4906 Int) 
     (E2_!4908 Int))
    (let ((?x62702 (+ 1 E2_!4908)))
    (let (($x60918 (= E2_!4906 ?x62702)))
    (let ((?x60135 (+ (- 1) E1_!4909)))
    (let (($x60213 (= E1_!4904 ?x60135)))
    (let (($x61469 (and $x60213 $x60918)))
    (let ((?x60965 (+ (- 1) V4_0)))
    (let (($x62348 (>= E2_!4908 ?x60965)))
    (let (($x62263 (>= E1_!4909 V2_0)))
    (let (($x60942 (<= V4_0 E2_!4908)))
    (let (($x60209 (not $x60942)))
    (let (($x60976 (<= V2_0 E1_!4907)))
    (let (($x62568 (not $x60976)))
    (let ((?x60109 (+ (- 1) V2_0)))
    (let (($x60129 (>= E1_!4904 ?x60109)))
    (let (($x62486 (>= E2_!4906 V4_0)))
    (let (($x62540 (<= V2_0 E1_!4904)))
    (let (($x60968 (not $x62540)))
    (let (($x62554 (<= V4_0 E2_!4905)))
    (let (($x60985 (not $x62554)))
    (let
    (($x60277
      (and $x60985 $x60968 $x62486 $x60129 $x62568 $x60209 $x62263 $x62348)))
    (let (($x61269 (not $x60277)))
    (let (($x62711 (not MW_S1_V6)))
    (let (($x62623 (or $x62711 W_S1_V6)))
    (let (($x62415 (not MW_S1_V4)))
    (let (($x62645 (or $x62415 W_S1_V4)))
    (let (($x62627 (not MW_S1_V2)))
    (let (($x60904 (or $x62627 W_S1_V2)))
    (let (($x62641 (not MW_S1_V3)))
    (let (($x61174 (or $x62641 W_S1_V3)))
    (let (($x62708 (not MW_S1_V1)))
    (let (($x62310 (or $x62708 W_S1_V1)))
    (let (($x60042 (= E2_!4908 E2_!4906)))
    (let (($x60189 (= V3_0 E2_!4905)))
    (let (($x130 (not R_E2_V3)))
    (let (($x62421 (or $x130 $x60189)))
    (let (($x62394 (= E1_!4907 E1_!4904)))
    (let (($x128 (not R_E2_V1)))
    (let (($x62485 (or $x128 $x62394)))
    (let (($x61317 (and $x62485 $x62421)))
    (let (($x60137 (not $x61317)))
    (let (($x62569 (or $x60137 $x60042)))
    (let (($x60905 (= E2_!4908 E2_!4905)))
    (let (($x61048 (not $x62485)))
    (let (($x61285 (or $x61048 $x60905)))
    (let (($x62400 (= E2_!4905 E2_!4906)))
    (let (($x60898 (not $x62421)))
    (let (($x60971 (or $x60898 $x62400)))
    (let (($x59857 (= E1_!4909 E1_!4907)))
    (let (($x62453 (= E2_!4908 V3_0)))
    (let (($x115 (not R_E1_V3)))
    (let (($x61140 (or $x115 $x62453)))
    (let (($x61096 (= E1_!4907 V1_0)))
    (let (($x113 (not R_E1_V1)))
    (let (($x60960 (or $x113 $x61096)))
    (let (($x60239 (and $x60960 $x61140)))
    (let (($x61367 (not $x60239)))
    (let (($x62570 (or $x61367 $x59857)))
    (let (($x62301 (= E1_!4904 E1_!4909)))
    (let (($x61268 (= V3_0 E2_!4908)))
    (let (($x60065 (or $x115 $x61268)))
    (let (($x60966 (= V1_0 E1_!4907)))
    (let (($x61331 (or $x113 $x60966)))
    (let (($x62296 (and $x61331 $x60065)))
    (let (($x60964 (not $x62296)))
    (let (($x61124 (or $x60964 $x62301)))
    (let (($x59861 (= E1_!4904 E1_!4907)))
    (let
    (($x60954
      (and $x59861 $x61124 $x62570 $x60971 $x61285 $x62569 $x62310 $x61174
      $x60904 $x62645 $x62623)))
    (let (($x59868 (not $x60954))) (or $x59868 $x61269 $x61469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 (let (($x56 (and W_S1_V6 R_E1_V6)))
 (let (($x54 (and W_S1_V4 R_E1_V4)))
 (let (($x50 (and W_S1_V2 R_E1_V2)))
 (let (($x48 (and W_S1_V3 R_E1_V3)))
 (let (($x46 (and W_S1_V1 R_E1_V1)))
 (let (($x69 (or $x46 $x48 $x50 R_E1_V5 $x54 $x56)))
 (let (($x70 (not $x69)))
 (let (($x71 (= DISJ_W_S1_R_E1 $x70)))
 (let (($x40 (and W_S1_V6 R_S1_V6)))
 (let (($x38 (and W_S1_V4 R_S1_V4)))
 (let (($x34 (and W_S1_V2 R_S1_V2)))
 (let (($x32 (and W_S1_V3 R_S1_V3)))
 (let (($x30 (and W_S1_V1 R_S1_V1)))
 (let (($x66 (or $x30 $x32 $x34 R_S1_V5 $x38 $x40)))
 (let (($x67 (not $x66)))
 (let (($x68 (= DISJ_W_S1_R_S1 $x67)))
 (let (($x24 (and W_S1_V6 R_E2_V6)))
 (let (($x21 (and W_S1_V4 R_E2_V4)))
 (let (($x16 (and W_S1_V2 R_E2_V2)))
 (let (($x13 (and W_S1_V3 R_E2_V3)))
 (let (($x10 (and W_S1_V1 R_E2_V1)))
 (let (($x63 (or $x10 $x13 $x16 R_E2_V5 $x21 $x24)))
 (let (($x64 (not $x63)))
 (let (($x65 (= DISJ_W_S1_R_E2 $x64))) (and W_S1_V5 $x65 $x68 $x71 $x62430)))))))))))))))))))))))))))
(assert
 (let (($x115 (not R_E1_V3)))
 (let (($x113 (not R_E1_V1)))
 (let (($x60916 (and $x113 $x115))) (not $x60916)))))
(check-sat)
(exit)

